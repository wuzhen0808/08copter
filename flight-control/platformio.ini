;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html
;
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[env:ts_esp_debug]
platform = espressif32
board = esp32-s3-devkitc-1
board_build.mcu = esp32s3
board_build.f_cpu = 240000000L
framework = arduino
build_type = debug
debug_speed = 12000
debug_tool = esp-builtin
debug_init_break = tbreak setup
upload_protocol = esp-builtin
upload_speed = 921600
monitor_speed = 115200
upload_port = COM6
monitor_port = COM5
monitor_filters = esp32_exception_decoder
lib_ldf_mode = off
build_src_filter = +<ts_esp/>
lib_deps =
    ts_esp
build_flags =
	-std=gnu++11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[env:ts_esp]
platform = espressif32
board = esp32-s3-devkitc-1
framework = arduino
lib_ldf_mode = off
build_src_filter = +<ts_esp/>
upload_port = COM5
monitor_port = COM5
lib_deps =
    ts_esp
build_flags =
	-std=gnu++11

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Target environment to build the firmware of flight control.
; 
[env:fc_uno]
platform = renesas-ra
board = uno_r4_minima
framework = arduino
lib_deps =	
	fc_uno
build_src_filter = +<fc_uno/>
build_flags = 
	-I lib/FreeRTOS-ArUNO/include
;	-fno-use-cxa-atexit	
;extra_scripts = extra_script.py
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Native env, for simulation purpose.
; In order to build the FreeRTOS-Kernal, must add option '-I lib/FreeRTOS-Kernel-MingW/include' 
[env:fc_native]
platform = native
test_framework = googletest
lib_ldf_mode = off
lib_deps =	
	fc_native
	googletest
build_src_filter = +<fc_native/>
build_flags = 		
	-I lib/FreeRTOS-Kernel-MingW/include
	-std=gnu++20
	-lws2_32
	-lwinmm
	-g
debug_test = test_tmp
debug_server = localhost
debug_port = 2000

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; ground station
[env:gs]
platform = native
test_framework = googletest
lib_ldf_mode = off
lib_deps = 
	gs
	googletest
build_src_filter = +<gs/>	
build_flags =
	-I lib/FreeRTOS-Kernel-MingW/include
	-std=gnu++20
	-lws2_32 
	-lwinmm
	-lncursesw 
	-lpanelw	
	-lcdk
	-DNCURSES_STATIC
	-g
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; The same with native only plus the debug option when compilation.
[env:debug]
platform = native
test_framework = googletest
lib_deps =	
	FreeRTOS-Kernel
	FreeRTOS-MemMang-heap4
	;how below lib configuration this funcational?
	FreeRTOS-MSVC-MingW
	JSBSim-Kernel
	hal_jsbsim
	hal_native	
;extends = native does not work for extends feature?
build_src_filter = +<native/>
build_flags = 	
	-D A8_ENV=2
	;start of JSBSIM
	;Why we add source code of JSBSim here?
	;Why not use the lib provided by JSBIim officially?
	;Because we cannot build with that lib(JSBSim.lib) and include to build our code.
	;With errors like undefined reference __imp__XXXX;
	;We suspect JSBSim.lib is not a valid format for us to build it with a gcc tool from MingGW env.
	;But, the same error if we replace JSBSim.lib with libJSBSim.a which is build in the MingGW ucrt env by ourself.
	;So we trying to build the source code of JSBSim, and there points to keep in mind:
	;1, Add options here. 
	
	;2, You need remove some source files which is not used and outdated for compile.
	;3, You need remove the utilities folder as well, which is a place for other standalong tools to be defined.
	-D JSBSIM_VERSION=\"1.1.13\"
	;_WIN32=1 and JSBSIM_STATIC_LINK=0 is used to define JSBSIM_API macro in JSBSim_API.h.
	-D _WIN32=1	
	-D JSBSIM_STATIC_LINK=0
	;libs used by JSBSim, which likely the standard lib of C?
	-lws2_32
	;end of JSBSIM
	-I lib/util/include
	-I lib/hal/include
	-I lib/core/include
	-I lib/freertos/include
	-I lib/native/include  	
	-I lib/FreeRTOS-MSVC-MingW/include
	-I lib/jsbsim/include
	-std=gnu++11
	-lwinmm
	-g		
	;-D A8_DEBUG_STRING

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; A tool from JSBSim. Used to generate the gnuplot command line arguments based on a xml setting for each csv output.
[env:plot]
platform = native
lib_deps =		
	;exsyxml
	JSBSim-Kernel
	JSBSim-Plot	
build_src_filter = +<plot/>
build_flags = 	
	-D JSBSIM_VERSION=\"1.1.13\"
	;to-fix: ... redeclared without dllimport attribute: previous dllimport ignored [-Wattributes]
	-D _WIN32=1	
	-D JSBSIM_STATIC_LINK=0
	;end of to-fix	
	-lws2_32
	-I lib/JSBSim-Kernel/include
	-std=gnu++11
	;to-fix:winconfig.h: No such file or directory
	-lwinmm
	-g

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Build the jsbsim main program. This is not too much relationship with the firmware under development. 
; 
[env:jsbsim]
platform = native
lib_deps =			
	JSBSim-Kernel	
build_src_filter = +<jsbsim/>
build_flags = 	
	-D JSBSIM_VERSION=\"1.2.0\"
	;to-fix: ... redeclared without dllimport attribute: previous dllimport ignored [-Wattributes]
	-D _WIN32=1	
	-D JSBSIM_STATIC_LINK=0
	;end of to-fix	
	-lws2_32
	;-I lib/JSBSim-Kernel/include
	-std=gnu++11
	;to-fix:winconfig.h: No such file or directory
	-lwinmm
	-g
		




	
